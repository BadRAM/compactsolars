// This sets us up for building a forge project - you need all of these
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
plugins {
    id "com.matthewprenger.cursegradle" version "1.0.9"
}


// Apply the forge plugin - this adds all the magic for automatically obfuscating, deobfuscating etc
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'

// This is a simple flatdir repository for "uploadArchives" when you don't have a remote repo to target.
repositories {
    flatDir {
        name "fileRepo"
        dirs "repo"
    }
	maven {
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven {
        name "Curse Maven"
        url "http://cursemaven.com"
    }
}

dependencies {
    compile 'curse.maven:ic2-242638:3838713'
    deobfCompile "mezz.jei:jei_1.12.2:4.8.0.+"
    //compile fileTree(dir: 'libs', include: ['*.jar'])
}

// This is our group. I'm cpw.mods
group= "cpw.mods" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
// This is our actual project within the group. Note: FML has "fml" here. But this is CompactSolars.
archivesBaseName = "CompactSolars"

// Setup the forge minecraft plugin data. Specify the preferred forge/minecraft version here
minecraft {
    version = "1.12.2-14.23.0.2528"
    mappings = "snapshot_20171101"
    runDir = "run"
}





curseforge {
    apiKey = project.hasProperty('curseforge_apikey') ? project.curseforge_apikey : '0'
    project {
        id = '228759'
        changelog = 'Empty'
        releaseType = 'beta'
    }
}




// This wrangles the resources for the jar files- stuff like textures and languages
processResources
{
    // we're omitting the .xcf files - they're development only
	exclude '**/*.xcf'
    // we only want to do search/replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// this sets our output jar to have a 'tag' of 'universal' on it
// It also adds the minecraft version in a custom version name
// The result is files named <projectname>-<mcversion>-<version>-universal.jar
jar {
    classifier = 'universal'
}

println "FISHBUM ${jar.version}"

// Configure an upload task. this is setup for uploading to files.minecraftforge.net. There are other examples around
uploadArchives {
    repositories.mavenDeployer {

        dependsOn 'build'

        if (project.hasProperty('forgeMavenPassword'))
        {
            repository(url: "http://files.minecraftforge.net/maven/manage/upload") {
                authentication(userName: project.getProperty('forgeMavenUser'), password: project.getProperty('forgeMavenPassword')) // the elvis operator. look it up.
            }
        }
        else
        {
            // local repo folder. Might wanna juset use  gradle install   if you wanans end it to maven-local
            repository(url: 'file://localhost/' + project.file('repo').getAbsolutePath())
        }


        // This is just the pom data for the maven repo
        pom {
            groupId = project.group
            // Force the maven upload to use the <mcversion>-<version> syntax preferred at files
            version = "${project.version}"
            artifactId = project.archivesBaseName
            project {
                name project.archivesBaseName
                packaging 'jar'
                description 'CompactSolars'
                url 'https://github.com/cpw/CompactSolars'

                scm {
                    url 'https://github.com/cpw/CompactSolars'
                    connection 'scm:git:git://github.com/progwml6/CompactSolars.git'
                    developerConnection 'scm:git:git@github.com:progwml6/CompactSolars.git'
                }
                issueManagement {
                    system 'github'
                    url 'https://github.com/progwml6/CompactSolars/issues'
                }

                licenses {
                    license {
                        name 'GNU Public License (GPL), Version 3.0'
                        url 'http://www.gnu.org/licenses/gpl-3.0.txt'
                        distribution 'repo'                        
                    }
                }

                developers {
                    developer {
                        id 'cpw'
                        name 'cpw'
                        roles { role 'developer' }
                    }
                }
            }
        }
    }
}